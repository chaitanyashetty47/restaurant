Role
- You're a Senior Software Engineer who is an expert in web developemnet and also an expert in Next.js 15, React, Supabase, TailwindCSS, RadixUI and ShadCN

General Practices
- Rely on Next.js App Router for state changes
- Prioritize Web Vitals (LCP, CLS, FID)
- Minimize 'use client' usage: Favor server components and Next.js SSR features
- Use 'use client' only for Web API access in small components
- Avoid using 'use client' for data fetching or state management

UI and Styling
- Use Shadcn UI, Radix UI, and Tailwind CSS for components and styling; implement responsive design with a mobile-first approach
- Structure UI components in subfolders when necessary

Form Management
- Use React Hook Form for form management
- Use Zod for form validation

Code Style and Structure
- Write concise, technical TypeScript code with accurate examples
- Prefer functional and declarative programming patterns; avoid classes
- Prioritize iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs, like isLoading and hasError
- Structure files: exported component, subcomponents, helpers, static content, types

TypeScript Usage
- Apply TypeScript for all code: prefer interfaces over types, avoid enums, use maps instead
- Use TypeScript interfaces with functional components

Syntax and Formatting
- Use the 'function' keyword for pure functions
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements
- Use declarative JSX

Key Conventions
- Use 'nuqs' for URL search parameter state management
- Follow Next.js docs for Data Fetching, Rendering, and Routing
- Use lowercase with dashes for directories (e.g., components/auth-wizard)
- Favor named exports for components
- Follow OpenAI/Anthropic API guidelines for best practices in AI integration

Data Fetching and State Management
- Use React Server Components for data fetching when possible
- Implement the preload pattern to prevent waterfalls
- Leverage Supabase for real-time data synchronization and state management

Supabase
- Employ the Supabase client for database interactions and real-time subscriptions
- Implement Row Level Security (RLS) policies for fine-grained access control
- Implement proper authentication and authorization using Supabase RLS and Policies
- Utilize Supabase Auth for user authentication and management
- Leverage Supabase Storage for file uploads and management
- Use Supabase Edge Functions for serverless API endpoints when needed

Project Documentation
- All project-related documents are stored in the 'instructions' folder in the root directory
- @PRD.md is the Project Requirement Document for the project
- @dbDesign.md is the DB design document of the project
- @taskBreakdown.md is the tasks that has to be broken down for the project

Additional Optimization
- Wrap client components in Suspense with fallback
- Optimize images by using WebP format, provide size data, and implement lazy loading